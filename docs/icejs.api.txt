////////// 模块相关属性 //////////
ice-module 				定义一个模块模块，模块名不能重复
-----------------------------------------------------------
ice-src 				模块加载路径，必须与ice-module同时存在
-----------------------------------------------------------
ice-cache 				是否缓存此跳转页面数据，默认为config.directionCache，必须与ice-module同时存在
-----------------------------------------------------------
ice-href				模块跳转，若没有设置ice-base=false，则跳转依赖base.url参数
-----------------------------------------------------------
ice-target				无刷新跳转目标模块，一般与<a>或<form>元素使用。当值没有":"和","时表示模块名，当值的格式为"code1:mod1, 
code2:mod2..."时，表示返回的不同状态对应跳转不同的模块，如果没有该属性则只会普通刷新跳转
-----------------------------------------------------------
ice-router				用于模块的<template>元素上，定义地址栏的url（不在0.1.0版本规划中）
-----------------------------------------------------------
ice-title 				用于模块的<template>元素上，定义页面标题，如果不设置则不改变标题而是保持原来的
-----------------------------------------------------------
备注：子作用域可使用this.props参数来获取父作用域定义的vm数据，ice-driver定义的元素驱动器也属于一个独立模块
-----------------------------------------------------------
ice-group				将元素进行分组，相同标签值的元素将会分为一组
-----------------------------------------------------------
onrequest				模块请求事件，发出请求前触发（模块事件），可使用模板引擎的:onrequest绑定
-----------------------------------------------------------
onresponse				模块响应事件，请求响应后触发（模块事件），可使用模板引擎的:onresponse绑定
-----------------------------------------------------------
onfinish				模块转向完成事件，模块填充新内容后触发（模块事件），可使用模板引擎的:onfinish绑定
-----------------------------------------------------------
-----------------------------------------------------------



////////// url风格（v0.1.0） //////////
http://icejs.org/root-index							只有模块信息
http://icejs.org/root-index@login					有模块信息和状态信息
http://icejs.org/root-index?id=28971897138@login	有模块信息、状态信息和参数
-----------------------------------------------------------



////////// url风格（Restful/v0.2.0） //////////
http://icejs.org/index								只有模块信息
http://icejs.org/index@login						有模块信息和状态信息
http://icejs.org/index?id=28971897138@login			有模块信息、状态信息和参数
-----------------------------------------------------------
-----------------------------------------------------------



////////// 元素驱动器 //////////
元素驱动器对象拥有init方法、layout属性、action属性、apply方法、deps属性
-----------------------------------------------------------
ice.install(componentDefiner:Object) 				使用元素驱动器或插件，此方法内部会根据特征区分元素驱动器和插件
-----------------------------------------------------------


////////// ModuleCaller //////////
贯穿模块定义中各成员方法中的对象，以this代替.
-----------------------------------------------------------
mc.state	获取当前模块或组件内的vm对象
-----------------------------------------------------------
mc.props	获取从父组件传递过来的值
-----------------------------------------------------------
mc.refs	 	获取组件对象，进行操作。可通过refs.self.refName获得当前模块的组件对象，refs.moduleName.refName获得其他模块的组件对象
-----------------------------------------------------------
-----------------------------------------------------------



////////// 插件 //////////
插件定义必须有build方法，使用时直接在module或component的成员方法内引入即可自动注入对象
-----------------------------------------------------------
ice.install(pluginDefiner:Object) 				使用元素驱动器或插件，此方法内部会根据特征区分组件和插件
-----------------------------------------------------------
-----------------------------------------------------------



////////// 通用属性 //////////
ice-base				true/false，路径是否依赖请求base路径，默认为true。以下情况可使用此属性：
						①、与ice-module一起使用，且有ice-src
						②、与*:href或form:action一起使用，且有ice-target
-----------------------------------------------------------
-----------------------------------------------------------



////////// MVVM //////////
-----------------------------------------------------------
ice.module(moduleName:String, object:Object)		将模板内的模块进行初始化，object对象属性为：
							init 					方法，返回需初始化的vm绑定变量、绑定方法及计算属性，其中绑定变量、绑定方法为对象属性，计算属性为computed属性的值对象属性，当计算属性为方法时表示get方法，当计算属性为对象时可定义set、get方法
							apply 					方法，显式操作模块内的元素，此方法将传入ice-module属性所在元素的封装对象，此方法将会在解析模板前
-----------------------------------------------------------
-----------------------------------------------------------



////////// HTML模板属性 //////////
-----------------------------------------------------------
:for					循环渲染所在元素及内部元素，value格式为“item of collection”，渲染后将会移除此属性
-----------------------------------------------------------
:key					:for循环渲染时的key，必须与:for一起使用
-----------------------------------------------------------
:if 					value为js判断语句，若true则显示此元素及内部元素，false则隐藏此元素及内部元素
-----------------------------------------------------------
:else-if 				value为js判断语句，与:if属性一起使用
-----------------------------------------------------------
:else 	 				value为js判断语句，与:if属性一起使用
-----------------------------------------------------------
:on[event name]			事件绑定，格式为:on+[事件名称]，值为方法名，可额外传入参数
-----------------------------------------------------------
:model 					表单控件绑定数据
-----------------------------------------------------------
{{ expression }} 		模板表达式，可在模板任意非模板属性值或元素内使用，双括号内一般为vm中定义的变量，也可以在内部进行方法调用，调用方式和js语法一致
-----------------------------------------------------------
特殊处理 					绑定元素的class时可传入数组，绑定渲染时会自动用空格隔开；绑定style属性时可传入对象，键为样式名的驼峰式，值为样式值
-----------------------------------------------------------
-----------------------------------------------------------



////////// 全局配置 //////////
-----------------------------------------------------------
ice.config(options:Object)	配置项设置，参数为一个对象，对象中的有效键名为：
							stateSymbol 	状态标识符，默认为"@"
							base 	    	对象，内包含url、lang、plugin、driver参数
								url				请求base路径
								plugin 			插件根目录，当此值为function时需返回一个路径字符串
								driver 			驱动器根目录，当此值为function时需返回一个路径字符串
							directionCache	跳转模块缓存，当加载过的模块再次跳转时则使用缓存而不再请求服务器，适用于实时性差的模块
							moduleSepatator	url中模块名称与模块内容标识的分隔符，默认为"-"
							urlRule			自定义ajax请求时的url规则，通过设置此规则将规则中的模块名称与模块内容标识替换为当前请求环境的真实值，此规则与base.url和ice-base关联，即当设置了base.url且ice-base不为false时将自动添加base.url到此url前，如果ice-base为false时，此规则转换后的url将会从根目录当作url的起始路径，即在设置规则时第一个字符如果不是"/"，则系统将自动添加"/"到url的开头部分。默认规则为":m/:v.html";
							alias           元素驱动器别名，为一个对象，key为别名，value为对应的元素驱动器地址（地址可使用“.”或“/”分割路径）
							page404 		定义404页面显示模块及请求地址，格式为{moduleName: 404url}
							page500 		定义500页面显示模块及请求地址，格式为{moduleName: 500url}
// 或者直接将配置项赋值给config
-----------------------------------------------------------
-----------------------------------------------------------



////////// 预定义插件 //////////

////////// http插件 //////////
-----------------------------------------------------------
http.request(options:Object)	ajax请求，get\post方法的底层方法，参数对象的有效键名为：
								method 		请求类型，GET或POST，大小写不敏感，默认为GET
								url 		请求地址，必传参数
								data 		提交的额外参数，可写为form对象、FormData对象、或格式为k1=v1&k2=v2、{k1:v1, k2:v2}的数据，当data不为form对象时必须要有src值（当data为form对象时，如果也提供了src参数则优先使用src参数）
								async 		是否异步请求，默认为true
								cache 		请求缓存，如果为false，则每次都会发送请求，默认为true
								contentType 请求参数编码
								type 		返回的数据类型，TEXT/JSON/SCRIPT/JSONP，默认为TEXT
								username	服务器认证用户名
								password	服务器认证密码
								mimeType	设置mimeType
								headers 	请求头信息，为一个对象
								timeout 	请求超时时间
								beforeSend 	请求发送前回调，函数参数为iceXHR对象、options
								success 	请求成功后回调，函数参数为data、statusText、iceXHR对象
								error 		请求失败后回调，函数参数为iceXHR对象、statusText
								complete	请求完成后回调，函数参数为iceXHR对象、statusText
								abort 		请求中断后回调，函数参数为statusText
-----------------------------------------------------------
http.get(url:String[, args:String/Object][, callback:Function][, type:String])		get请求，返回promise对象
-----------------------------------------------------------
http.post(url:String[, data:String/Object][, callback:Function][, type:String])		post请求，返回promise对象
-----------------------------------------------------------
http.reqBefore([target:String/Object, callback: Function])		ajax请求开始前事件绑定
-----------------------------------------------------------
http.reqComplete([target:String/Object, callback: Function])	ajax请求完成事件绑定
-----------------------------------------------------------
http.reqSuccess([target:String/Object, callback: Function])		ajax请求成功事件绑定
-----------------------------------------------------------
http.reqError([target:String/Object, callback: Function])		ajax请求失败事件绑定
-----------------------------------------------------------
http.reqAbort([target:String/Object, callback: Function])		ajax请求中断事件绑定
-----------------------------------------------------------
http.reqProgress([target:String/Object, callback: Function])	ajax请求响应进度事件绑定
-----------------------------------------------------------
http.uploadProgress([target:String/Object, callback: Function])	ajax上传进度事件绑定
-----------------------------------------------------------
备注：以上7个ajax事件返回http对象，且可多次叠加绑定事件回调函数，target参数可选值为：
								省略传入/0/""/undefined/null/false 	监听使用http插件发起的所有请求
								"get"/"GET"							只监听使用http插件触发的get请求
								"post"/"POST"						只监听使用http插件触发的post请求
								"group name"						只监听使用http插件触发的在group name组下的请求
								request target 						只监听使用http插件触发请求的目标元素对象
								"self"								当使用http插件触发请求的目标元素对象为自身时触发
-----------------------------------------------------------
-----------------------------------------------------------



////////// event插件 //////////
-----------------------------------------------------------
event.support(type:String, elem:Object) 													事件支持检测
-----------------------------------------------------------
event.on(elem:Object, types:String, listener:Function, useCapture:Boolean, once:Boolean) 	事件绑定
-----------------------------------------------------------
event.remove(elem:Object, types:String, listener:Function, useCapture:Boolean)				事件解绑
-----------------------------------------------------------
event.emit(elem:Object, types:String) 														事件触发
-----------------------------------------------------------
-----------------------------------------------------------



////////// animate插件 //////////
-----------------------------------------------------------
animate.linear(animatedVar:Number|Object, to:Number|Object[, during:Number][, callback:Function])				
animate.sine.easeIn(animatedVar:Number|Object, to:Number|Object[, during:Number][, callback:Function])
animate.sine.easeOut(animatedVar:Number|Object, to:Number|Object[, during:Number][, callback:Function])
animate.sine.easeInOut(animatedVar:Number|Object, to:Number|Object[, during:Number][, callback:Function])

animate.quad.easeIn(animatedVar:Number|Object, to:Number|Object[, during:Number][, callback:Function])
animate.quad.easeOut(animatedVar:Number|Object, to:Number|Object[, during:Number][, callback:Function])
animate.quad.easeInOut(animatedVar:Number|Object, to:Number|Object[, during:Number][, callback:Function])

animate.cubic.easeIn(animatedVar:Number|Object, to:Number|Object[, during:Number][, callback:Function])
animate.cubic.easeOut(animatedVar:Number|Object, to:Number|Object[, during:Number][, callback:Function])
animate.cubic.easeInOut(animatedVar:Number|Object, to:Number|Object[, during:Number][, callback:Function])

animate.quart.easeIn(animatedVar:Number|Object, to:Number|Object[, during:Number][, callback:Function])
animate.quart.easeOut(animatedVar:Number|Object, to:Number|Object[, during:Number][, callback:Function])
animate.quart.easeInOut(animatedVar:Number|Object, to:Number|Object[, during:Number][, callback:Function])

animate.quint.easeIn(animatedVar:Number|Object, to:Number|Object[, during:Number][, callback:Function])
animate.quint.easeOut(animatedVar:Number|Object, to:Number|Object[, during:Number][, callback:Function])
animate.quint.easeInOut(animatedVar:Number|Object, to:Number|Object[, during:Number][, callback:Function])

animate.expo.easeIn(animatedVar:Number|Object, to:Number|Object[, during:Number][, callback:Function])
animate.expo.easeOut(animatedVar:Number|Object, to:Number|Object[, during:Number][, callback:Function])
animate.expo.easeInOut(animatedVar:Number|Object, to:Number|Object[, during:Number][, callback:Function])

animate.circ.easeIn(animatedVar:Number|Object, to:Number|Object[, during:Number][, callback:Function])
animate.circ.easeOut(animatedVar:Number|Object, to:Number|Object[, during:Number][, callback:Function])
animate.circ.easeInOut(animatedVar:Number|Object, to:Number|Object[, during:Number][, callback:Function])

animate.back.easeIn(animatedVar:Number|Object, to:Number|Object[, during:Number][, callback:Function])
animate.back.easeOut(animatedVar:Number|Object, to:Number|Object[, during:Number][, callback:Function])
animate.back.easeInOut(animatedVar:Number|Object, to:Number|Object[, during:Number][, callback:Function])

animate.elastic.easeIn(animatedVar:Number|Object, to:Number|Object[, during:Number][, callback:Function])
animate.elastic.easeOut(animatedVar:Number|Object, to:Number|Object[, during:Number][, callback:Function])
animate.elastic.easeInOut(animatedVar:Number|Object, to:Number|Object[, during:Number][, callback:Function])

animate.bounce.easeIn(animatedVar:Number|Object, to:Number|Object[, during:Number][, callback:Function])
animate.bounce.easeOut(animatedVar:Number|Object, to:Number|Object[, during:Number][, callback:Function])
animate.bounce.easeInOut(animatedVar:Number|Object, to:Number|Object[, during:Number][, callback:Function])

animate.step(fn:Function)				动画过程中每一步的回调函数
animate.stop() 							停止动画
animate.delay(millisecond:Number) 		动画延迟毫秒数
-----------------------------------------------------------
-----------------------------------------------------------